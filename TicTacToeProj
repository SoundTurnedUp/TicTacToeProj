// two person multiplayer?
// difficulty levels?
// save and load game?
// GUI?

class Program
{
    static void Main()
    {
        Menu menu = new Menu();
        menu.MainMenu();
    }
}
class DisplayHelper
{
    public static void ShowMessage(string message, int delayMilliseconds = 1500)
    {
        Console.Clear();
        Console.WriteLine(message);
        Thread.Sleep(delayMilliseconds);
        Console.Clear();
    }
    public static void Pause()
    {
        Console.WriteLine("Press any key to continue...");
        Console.ReadKey();
    }
}
class Menu
{
    string choice = "";
    GameController controller = new GameController();
    public void MainMenu()
    {
        do
        {
            Console.Clear();
            Console.WriteLine("\r████████╗██╗░█████╗░░░░░░░████████╗░█████╗░░█████╗░░░░░░░████████╗░█████╗░███████╗\r\n╚══██╔══╝██║██╔══██╗░░░░░░╚══██╔══╝██╔══██╗██╔══██╗░░░░░░╚══██╔══╝██╔══██╗██╔════╝\r\n░░░██║░░░██║██║░░╚═╝█████╗░░░██║░░░███████║██║░░╚═╝█████╗░░░██║░░░██║░░██║█████╗░░\r\n░░░██║░░░██║██║░░██╗╚════╝░░░██║░░░██╔══██║██║░░██╗╚════╝░░░██║░░░██║░░██║██╔══╝░░\r\n░░░██║░░░██║╚█████╔╝░░░░░░░░░██║░░░██║░░██║╚█████╔╝░░░░░░░░░██║░░░╚█████╔╝███████╗\r\n░░░╚═╝░░░╚═╝░╚════╝░░░░░░░░░░╚═╝░░░╚═╝░░╚═╝░╚════╝░░░░░░░░░░╚═╝░░░░╚════╝░╚══════╝");
            Console.WriteLine("Unbeatable tic-tac-toe 'AI'\n");

            Console.WriteLine("1. Play vs AI");
            Console.WriteLine("2. Play vs Friend");
            Console.WriteLine("Q. Quit");
            Console.Write("Enter choice: ");
            choice = Console.ReadLine();
            switch (choice.ToLower())
            {
                case "1":
                case "ai":
                case "x":
                    PlayAI();
                    break;
                case "2":
                case "friend":
                case "o":
                    PlayFriend();
                    break;
                case "q":
                case "quit":
                    DisplayHelper.ShowMessage("Quitting...");
                    break;
                default:
                    DisplayHelper.ShowMessage("Invalid input, try again");
                    break;
            }
        } while (choice.ToLower() != "q" && choice.ToLower() != "quit");
    }

    public string SecondMenu()
    {
        do {
            Console.Clear();
            Console.WriteLine("1. Play X");
            Console.WriteLine("2. Play O");
            Console.WriteLine("Q. Quit");
            Console.Write("Enter choice: ");
            choice = Console.ReadLine();
            switch (choice.ToLower())
            {
                case "1":
                case "x":
                    return "X";
                case "2":
                case "o":
                    return "O";
                case "q":
                case "quit":
                    DisplayHelper.ShowMessage("Quitting...");
                    break;
                default:
                    DisplayHelper.ShowMessage("Invalid input, try again");
                    break;
            }
        } while (choice.ToLower() != "q" && choice.ToLower() != "quit");
        return null;
    }
    public void PlayAI()
    {
        string playerChoice = SecondMenu();
        if (playerChoice == null) { return; }
        else
        {
            controller.AIGame(playerChoice);
        }
    }
    public void PlayFriend()
    {
        if (SecondMenu() == null) { return; }
    }
}

class GameFunctions
{
    private string[,] board;
    private string currentPlayer;
    public string CurrentPlayer { get { return currentPlayer; } set { currentPlayer = value; } }
    private int turnCount;

    public GameFunctions()
    {
        board = new string[3, 3];
        currentPlayer = "X";
        turnCount = 0;
    }

    private void CreateBoard()
    {
        for (int i = 0; i < 3; i++)
        {
            for (int j = 0; j < 3; j++)
            {
                board[i, j] = ".";
            }
        }
    }
    public void DisplayBoard()
    {
        Console.Clear();
        for (int i = 0; i < 3; i++)
        {
            for (int j = 0; j < 3; j++)
            {
                Console.Write(board[i, j]);
                if (j < 2) Console.Write("|");
            }
            Console.WriteLine();
            if (i < 2) Console.WriteLine("----");
        }
        Console.WriteLine();
    }
    public void SwitchPlayer()
    {
        if (currentPlayer == "X") currentPlayer = "O";
        if (currentPlayer == "O") currentPlayer = "X";
    }
    public bool MakeMove(int row, int col)
    {
        if (row < 0 || row > 2 || col < 0 || col > 2 || board[row, col] != ".") return false;
        board[row, col] = currentPlayer;
        turnCount++;
        return true;
    }
    public string CheckWinner()
    {
        for (int i = 0; i < 3; i++)
        {
            if (board[i, 0] == board[i, 1] && board[i, 1] == board[i, 2] && board[i, 0] != " ") return $"Winner: {board[i, 0]}";
            if (board[0, i] == board[1, i] && board[1, i] == board[2, i] && board[0, i] != " ") return $"Winner: {board[0, i]}";
        }
        if (board[0, 0] == board[1, 1] && board[1, 1] == board[2, 2] && board[0, 0] != " ") return $"Winner: {board[0, 0]}";
        if (board[0, 2] == board[1, 1] && board[1, 1] == board[2, 0] && board[0, 2] != " ") return $"Winner: {board[0, 2]}";
        return null;
    }
    public bool IsDraw()
    {
        return turnCount == 9 && CheckWinner() == null;
    }
    public bool IsOnGoing()
    {
        return turnCount < 9 && CheckWinner() == null;
    }
    public void ResetGame()
    {
        CreateBoard();
        currentPlayer = "X";
        turnCount = 0;
    }
}

class GameController
{
    private GameFunctions game;

    public GameController()
    {
        game = new GameFunctions();
    }
    public void AIGame(string player)
    {
        bool isPlayerTurn = player.ToUpper() == "X";

        while (game.IsOnGoing())
        {
            game.DisplayBoard();

            if (isPlayerTurn)
            {
                //PlayerMove subprogram
            }
            else
            {
                 //AIMove subprogram
            }
            string winner = game.CheckWinner();
            if (winner != null)
            {
                game.DisplayBoard();
                Console.WriteLine($"Player {winner} wins!");
                DisplayHelper.Pause();
                break;
            }
            else if (game.IsDraw())
            {
                game.DisplayBoard();
                Console.WriteLine("It's a draw!");
                DisplayHelper.Pause();
                break;
            }
            game.SwitchPlayer();
            isPlayerTurn = !isPlayerTurn;
        }

        Console.WriteLine("Play again?");
        Console.WriteLine("Y = Yes");
        Console.WriteLine("N = No");
        string choice = Console.ReadLine();
        if (choice.ToUpper() == "Y")
        {
            game.ResetGame();
            AIGame(player);
        }
    }
    private void PlayerMove()
    {
        bool validMove = false;
        while (!validMove)
        {
            Console.WriteLine($"Player {game.CurrentPlayer}, make your move.");
            Console.Write("Row (1 - 3): ");
            int row = int.Parse(Console.ReadLine()) - 1;
            Console.Write("Col (1 - 3): ");
            int col = int.Parse(Console.ReadLine()) - 1;

            validMove = game.MakeMove(row, col);
            if (!validMove) DisplayHelper.ShowMessage("Invalid move. Try again!");
        }
    }
    private void AIMove()
    {
        Console.WriteLine("AI is thinking...");
        Thread.Sleep(1000);

        //implement minimax stuffs here if I end up using AI
    }
}
